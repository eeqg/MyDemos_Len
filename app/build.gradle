/**
 * app/build.gradle 默认三个小节点：apply、android和dependencies。
 *
 * apply是一个方法，给它传递了一个参数plugin，plugin 的值是'com.android.application'。
 * 如果有多个参数，则以逗号隔开，例如：compile name: 'volley', ext: 'aar'。
 */

apply plugin: 'com.android.application'

/**
 * android 项目配置
 */
android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "com.example.mydemos_len"
        minSdkVersion 21
        targetSdkVersion 28
        versionName '1.0'
        versionCode 1

        flavorDimensions "default"

        //自定义config属性
        buildConfigField "boolean", "AUTO_UPDATES", "true"
        buildConfigField "int", "fortest", "0"
    }

    dataBinding {
        //dataBinding
        enabled = true
    }

    /**
     * 签名设置
     */
    signingConfigs {
        myConfigs {
            storeFile file("../keystore.jks")
            storePassword "123456"
            keyAlias "wp"
            keyPassword "123456"
        }
    }
    /**
     * buildTypes
     */
    buildTypes {
        //默认是release
        release {
            //对齐优化设置为true，否则找不到该task (默认不写也是true)  (fir)
            zipAlignEnabled true

            // 自定义config属性: "LOG_DEBUG" 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"

            debuggable false    //默认false，可不写

            // 是否进行混淆
            minifyEnabled false
            // 混淆文件的位置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            //签名
            signingConfig signingConfigs.myConfigs
        }
        debug {
            //对齐优化设置为true，否则找不到该task (默认不写也是true)  (fir)
            zipAlignEnabled true

            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"

            debuggable true     //默认true，可不写

            // 是否进行混淆
            minifyEnabled false
            // 混淆文件的位置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            //签名
            signingConfig signingConfigs.myConfigs
        }
    }

    /**
     * 产品渠道
     * Terminal 执行 assembleRelease 或 assembleDebug 可一次性打包.
     */
    productFlavors {
        defaultApk {}
        GooglePlay {
            applicationId "com.example.mydemos_len.google_play"

            buildConfigField "int", "fortest", "1"
        }
        xiaomi {
            applicationId "com.example.mydemos_len.xiaomi"
            versionName '5.1.0'
            versionCode 11

            buildConfigField "boolean", "AUTO_UPDATES", "false"
            buildConfigField "int", "fortest", "2"
        }
        umeng {
            applicationId "com.example.mydemos_len.umeng"
            versionName '2.1.0'
            versionCode 2

            buildConfigField "int", "fortest", "3"
        }
    }

    //修改生成的apk名字
//    applicationVariants.all { variant ->
//
//        if (variant.buildType.name.equals('release')) {
//            variant.outputs.each { output ->
//                def appName = 'MyDemos'
//                def oldFile = output.outputFile
//                def buildName = 'GooglePlay'
//                def releaseApkName
//
//                variant.productFlavors.each { product ->
//                    buildName = product.name
//                }
//
//                releaseApkName = appName + /*getVersionNameFromManifest()*/versionName + '-' + buildName + '-' + getDate() + '.apk'
//                output.outputFile = new File(oldFile.parent, releaseApkName)
//            }
//        }
//    }
//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            output.outputFile = new File(
//                    output.outputFile.parent,
//                    output.outputFile.name.replace(".apk", "-customer-${variant.versionName}.apk"))
//        }
//    }

//    sourceSets {
//        main {
//            jniLibs.srcDirs = ['libs']
//        }
//    }
}

//获取时间戳
//def getDate() {
//    def date = new Date()
//    def formattedDate = date.format('yyyyMMddHHmm')
//    return formattedDate
//}

//从androidManifest.xml中获取版本号
//def getVersionNameFromManifest() {
//    def manifestParser = new com.android.builder.core.DefaultManifestParser()
//    return manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
//}

//声明
repositories {
    flatDir { dirs 'libs' }
}

/**
 * add 依赖库
 *
 * //单文件依赖
 *   compile files('libs/android-support-v4.jar')
 * //某个文件夹下面全部依赖
 *   compile fileTree(dir: 'libs', include: '*.jar')
 */
dependencies {
    compile files('libs/BaiduLBS_Android.jar')
    implementation project(':okhttputils')
    compile(name: "imageselector-release", ext: "aar")
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'io.reactivex:rxjava:1.2.7'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'com.trello:rxlifecycle:0.3.0'
    implementation 'com.trello:rxlifecycle-components:0.3.0'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    implementation 'com.bigkoo:convenientbanner:2.0.5'
    implementation 'com.ToxicBakery.viewpager.transforms:view-pager-transforms:1.2.32@aar'
    implementation 'com.github.fafaldo:fab-toolbar:1.2.0'
    implementation 'com.github.eeqg:MyDevelopmentUtilAssemble:1.3.0'
}


//apply plugin: 'im.fir.plugin.gradle'// 必填 (fir)
//fir {
//
//    //必填 上传 fir.im apk 字段，否则无法上传 APP 到 fir.im
//    //apiToken'替换为你的 fir.im API_TOKEN'
//    apiToken 'b9489c681bdff31da37893338e624bc9'
//
//    //可选 上传fir.im 中显示的changelog
//    //changeLog '替换为你的更新日志'
//    changeLog '使用Gradle-fir插件自动上传测试'
//}

////可选 如需实现自动上传符号表到 BugHD 功能，为必填项
//bughd{
//    projectId '替换为你的 BugHD PROJECT_ID'
//    apiToken '替换为你的 BugHD API_TOKEN'
//}